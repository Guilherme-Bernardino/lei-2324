private Map<Vertex<V>, Map<Vertex<V>, List<Edge<E,V>>>> adjacencyMap;

    public DigraphAdjacencyMatrix() {
        this.adjacencyMap = new HashMap<>();
    }
    @Override
    public int numVertices() {
        return adjacencyMap.size();
    }

    @Override
    public int numEdges() {
        return edges().size();
    }

    @Override
    public Collection<Vertex<V>> vertices() {
        return adjacencyMap.keySet();
    }

    @Override
    public Collection<Edge<E, V>> edges() {
        Set<Edge<E,V>> edgeSet = new HashSet<>();

        for (Map<Vertex<V>, List<Edge<E,V>>> adjacencies : adjacencyMap.values()) {
            for (List<Edge<E,V>> edges : adjacencies.values()) {
                edgeSet.addAll(edges);
            }
        }
        return edgeSet;
    }

    @Override
    public Collection<Edge<E, V>> incidentEdges(Vertex<V> inbound) throws InvalidVertexException {
        checkVertex(inbound);

        List<Edge<E, V>> incidentEdges = new ArrayList<>();
        for (Map.Entry<Vertex<V>, List<Edge<E, V>>> entry : adjacencyMap.get(inbound).entrySet()) {
            incidentEdges.addAll(entry.getValue());
        }
        /*
        for (Map.Entry<Vertex<V>, Map<Vertex<V>, List<Edge<E, V>>>> entry : adjacencyMap.entrySet()) {
            if (entry.getValue().containsKey(inbound)) {
                incidentEdges.addAll(entry.getValue().get(inbound));
            }
        }*/

        return incidentEdges;
    }

    @Override
    public Vertex<V> opposite(Vertex<V> v, Edge<E, V> e) throws InvalidVertexException, InvalidEdgeException {
        return null;
    }

    @Override
    public Collection<Edge<E, V>> outboundEdges(Vertex<V> outbound) throws InvalidVertexException {
        checkVertex(outbound);

        /*
        List<Edge<E, V>> outboundEdges = new ArrayList<>();
        for (Map.Entry<Vertex<V>, Map<Vertex<V>, List<Edge<E, V>>>> entry : adjacencyMap.entrySet()) {
            Vertex<V> to = entry.getKey();
            if (adjacencyMap.get(outbound).containsKey(to)) {
                outboundEdges.addAll(adjacencyMap.get(outbound).get(to));
            }
        }*/

        Map<Vertex<V>, List<Edge<E,V>>> outboundMap = adjacencyMap.get(outbound);
        Collection<Edge<E, V>> outboundEdges = new ArrayList<>();

        for (List<Edge<E,V>> edgeList : outboundMap.values()) {
            outboundEdges.addAll(edgeList);
        }

        return outboundEdges;
    }

    @Override
    public boolean areAdjacent(Vertex<V> outbound, Vertex<V> inbound) throws InvalidVertexException {
        checkVertex(outbound);
        checkVertex(inbound);

        return adjacencyMap.get(outbound).containsKey(inbound);
    }

    @Override
    public Vertex<V> insertVertex(V vElement) throws InvalidVertexException {
        if(vertexOf(vElement) != null) {
            throw new InvalidVertexException(String.format("Element %s already exists.", vElement));
        }

        MyVertex v = new MyVertex(vElement);

        adjacencyMap.put(v, new HashMap<>());

        return v;
    }

    private Vertex<V> vertexOf(V element) {
        for (Vertex<V> v : adjacencyMap.keySet()) {
            if(v.element() == element) { //is it the same instance?
                return v;
            }
        }
        return null; //no vertex contains 'vElement'
    }

    @Override
    public Edge<E, V> insertEdge(Vertex<V> outbound, Vertex<V> inbound, E edgeElement) throws InvalidVertexException, InvalidEdgeException {
        return null;
    }

    @Override
    public Edge<E, V> insertEdge(V outboundElement, V inboundElement, E edgeElement) throws InvalidVertexException, InvalidEdgeException {
        return null;
    }

    @Override
    public V removeVertex(Vertex<V> v) throws InvalidVertexException {
        return null;
    }

    @Override
    public E removeEdge(Edge<E, V> e) throws InvalidEdgeException {
        return null;
    }

    @Override
    public V replace(Vertex<V> v, V newElement) throws InvalidVertexException {
        return null;
    }

    @Override
    public E replace(Edge<E, V> e, E newElement) throws InvalidEdgeException {
        return null;
    }

    private class MyVertex implements Vertex<V> {
        private V element;

        public MyVertex(V element) {
            this.element = element;
        }

        @Override
        public V element() {
            return element;
        }

        @Override
        public String toString() {
            return String.format("Vertex{%s}", element);
        }
    }

    private class MyEdge implements Edge<E, V> {
        private E element;

        public MyEdge(E element) {
            this.element = element;
        }

        @Override
        public E element() {
            return element;
        }

        @Override
        public Vertex<V>[] vertices() {
            //if the edge exists, then two existing vertices have the edge
            //in their incidentEdges lists
            for(Vertex<V> v : DigraphAdjacencyMatrix.this.adjacencyMap.keySet()) {
                for (Map.Entry<Vertex<V>, List<Edge<E, V>>> entry : adjacencyMap.get(v).entrySet()) {
                    List<Edge<E, V>> edges = entry.getValue();
                    for (Edge<E, V> edge : edges) {
                        if (edge == this) {
                            return new Vertex[]{v, entry.getKey()};
                        }
                    }
                }
            }

            return new Vertex[]{null, null}; //edge was removed from the graph
        }

        @Override
        public String toString() {
            return String.format("Edge{%s}", element);
        }

    }

    private MyVertex checkVertex(Vertex<V> v) throws InvalidVertexException {
        if(v == null) throw new InvalidVertexException("Null vertex.");

        MyVertex vertex;
        try {
            vertex = (MyVertex) v;
        } catch (ClassCastException e) {
            throw new InvalidVertexException("Not a vertex.");
        }

        if (!adjacencyMap.containsKey(v)) {
            throw new InvalidVertexException("Vertex does not belong to this graph.");
        }

        return vertex;
    }

    private MyEdge checkEdge(Edge<E, V> e) throws InvalidEdgeException {
        if(e == null) throw new InvalidEdgeException("Null edge.");

        MyEdge edge;
        try {
            edge = (MyEdge) e;
        } catch (ClassCastException ex) {
            throw new InvalidVertexException("Not an edge.");
        }

        if (!edges().contains(edge)) {
            throw new InvalidEdgeException("Edge does not belong to this graph.");
        }

        return edge;
    }